# -*- coding: utf-8 -*-


from django.db import models, migrations
import tinymce.models
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('geo', '0001_initial'),
        ('cliente', '0001_initial'),
        ('catalogo', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Consumo',
            fields=[
                ('codconsumo', models.IntegerField(verbose_name=b'Codigo Consumo', serialize=False, editable=False, primary_key=True)),
                ('fecha_mes', models.DateField(null=True, verbose_name=b'Fecha', blank=True)),
                ('dia_inicio', models.DateField(null=True, verbose_name=b'dia_inicio', blank=True)),
                ('dia_final', models.DateField(null=True, verbose_name=b'dia_final', blank=True)),
                ('totaleuros', models.FloatField(default=0.0, verbose_name=b'Total Euros', blank=True)),
                ('codcliente', models.ForeignKey(related_name='Consumo_Cliente', verbose_name=b'Codigo Cliente', to='cliente.Cliente')),
            ],
        ),
        migrations.CreateModel(
            name='facturasCli',
            fields=[
                ('idfactura', models.IntegerField(serialize=False, primary_key=True)),
                ('codigo', models.CharField(max_length=12)),
                ('numero', models.CharField(max_length=12)),
                ('totaleuros', models.FloatField()),
                ('hora', models.TimeField()),
                ('direccion', models.CharField(max_length=100)),
                ('codejercicio', models.CharField(max_length=4)),
                ('total', models.FloatField()),
                ('ciudad', models.CharField(max_length=100, null=True, blank=True)),
                ('codpostal', models.CharField(max_length=10, null=True, blank=True)),
                ('automatica', models.BooleanField(default=True)),
                ('nombrecliente', models.CharField(max_length=100)),
                ('observaciones', models.TextField(null=True, blank=True)),
                ('totaliva', models.FloatField()),
                ('fecha', models.DateField()),
                ('neto', models.FloatField()),
                ('deabono', models.BooleanField(default=False)),
                ('editable', models.BooleanField(default=False)),
                ('codalmacen', models.CharField(max_length=4, null=True, blank=True)),
                ('cifnif', models.CharField(max_length=20)),
                ('nogenerarasiento', models.BooleanField(default=True)),
                ('idfacturarect', models.IntegerField(null=True, blank=True)),
                ('provincia', models.CharField(max_length=100, null=True, blank=True)),
                ('codigorect', models.CharField(max_length=12, null=True, blank=True)),
                ('totalrecargo', models.FloatField(null=True, blank=True)),
                ('codagente', models.CharField(max_length=10, null=True, blank=True)),
                ('recfinanciero', models.FloatField()),
                ('idpagodevol', models.IntegerField(null=True, blank=True)),
                ('totalirpf', models.FloatField()),
                ('apartado', models.CharField(max_length=10, null=True, blank=True)),
                ('codserie', models.CharField(max_length=2)),
                ('porcomision', models.FloatField(null=True, blank=True)),
                ('irpf', models.FloatField()),
                ('idasiento', models.IntegerField(null=True, blank=True)),
                ('tpv', models.BooleanField(default=False)),
                ('tasaconv', models.FloatField()),
                ('codcliente', models.ForeignKey(blank=True, to='cliente.Cliente', null=True)),
                ('coddir', models.ForeignKey(related_name='factura_direccion', blank=True, to='cliente.DirClientes', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FormasEnvio',
            fields=[
                ('idEnvio', models.IntegerField(serialize=False, editable=False, primary_key=True)),
                ('nombre', models.CharField(max_length=250, verbose_name=b'Nombre [ES]')),
                ('nombre_va', models.CharField(max_length=250, verbose_name=b'Nombre [VA]', blank=True)),
                ('descripcion', models.TextField(null=True, verbose_name=b'Descripci\xc3\xb3n [ES]', blank=True)),
                ('descripcion_va', models.TextField(null=True, verbose_name=b'Descripci\xc3\xb3n [VA]', blank=True)),
                ('precio', models.FloatField(verbose_name=b'Precio')),
            ],
            options={
                'verbose_name': 'M\xe9todos de env\xedo',
            },
        ),
        migrations.CreateModel(
            name='FormasPago',
            fields=[
                ('codpago', models.IntegerField(serialize=False, editable=False, primary_key=True)),
                ('nombre', models.CharField(max_length=250, verbose_name=b'Nombre [ES]')),
                ('nombre_va', models.CharField(max_length=250, verbose_name=b'Nombre [VA]', blank=True)),
                ('descripcion', models.TextField(null=True, verbose_name=b'Descripci\xc3\xb3n [ES]', blank=True)),
                ('descripcion_va', models.TextField(null=True, verbose_name=b'Descripci\xc3\xb3n [VA]', blank=True)),
                ('cod_eneboo', models.CharField(max_length=50, null=True, verbose_name=b'C\xc3\xb3digo Eneboo', blank=True)),
                ('activa', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'M\xe9todos de Pago',
            },
        ),
        migrations.CreateModel(
            name='Impuesto',
            fields=[
                ('codimpuesto', models.CharField(max_length=10, serialize=False, primary_key=True)),
                ('recargo', models.FloatField(verbose_name=b'Recargo')),
                ('descripcion', models.CharField(max_length=50, verbose_name=b'Descripci\xc3\xb3n')),
                ('iva', models.FloatField(verbose_name=b'IVA', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
            ],
        ),
        migrations.CreateModel(
            name='LineaPedidoCli',
            fields=[
                ('idlinea', models.IntegerField(serialize=False, editable=False, primary_key=True)),
                ('pvpsindto', models.FloatField(blank=True, null=True, verbose_name=b'pvpsindto', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('pvpunitario', models.FloatField(blank=True, null=True, verbose_name=b'pvpunitario', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('cantidad', models.FloatField(blank=True, null=True, verbose_name=b'cantidad', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('pvptotal', models.FloatField(blank=True, null=True, verbose_name=b'pvptotal', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('descripcion', models.CharField(max_length=100, null=True, verbose_name=b'descripcion', blank=True)),
                ('idlineapresupuesto', models.IntegerField(default=0, verbose_name=b'idlineapresupuesto', editable=False)),
                ('cerrada', models.BooleanField(default=False, verbose_name=b'cerrada')),
                ('porcomision', models.FloatField(null=True, verbose_name=b'porcomision', blank=True)),
                ('iva', models.FloatField(blank=True, null=True, verbose_name=b'IVA', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('totalenalbaran', models.FloatField(blank=True, null=True, verbose_name=b'totalenalbaran', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('codimpuesto', models.ForeignKey(related_name='LineaPedidoCli_Impuesto', default=b'IVA18%', verbose_name=b'codimpuesto', to='facturacion.Impuesto')),
            ],
        ),
        migrations.CreateModel(
            name='lineasfacturascli',
            fields=[
                ('idlinea', models.IntegerField(serialize=False, editable=False, primary_key=True)),
                ('pvptotal', models.FloatField(default=0)),
                ('cantidad', models.FloatField(default=0)),
                ('irpf', models.FloatField(default=0, null=True, blank=True)),
                ('recargo', models.FloatField(default=0, null=True, blank=True)),
                ('dtolineal', models.FloatField(default=0)),
                ('descripcion', models.CharField(max_length=100, null=True, blank=True)),
                ('idalbaran', models.IntegerField(null=True, blank=True)),
                ('codimpuesto', models.CharField(max_length=10, null=True, blank=True)),
                ('porcomision', models.FloatField(default=0, null=True, blank=True)),
                ('iva', models.FloatField(null=True, blank=True)),
                ('dtopor', models.FloatField(default=0)),
                ('pvpsindto', models.FloatField(default=0)),
                ('idliquidacio', models.IntegerField(null=True, blank=True)),
                ('pvpunitario', models.FloatField(default=0)),
                ('idfactura', models.ForeignKey(to='facturacion.facturasCli')),
                ('referencia', models.ForeignKey(to='catalogo.Articulo')),
            ],
        ),
        migrations.CreateModel(
            name='PedidoCli',
            fields=[
                ('idpedido', models.IntegerField(serialize=False, editable=False, primary_key=True)),
                ('cifnif', models.CharField(max_length=20, null=True, verbose_name=b'CIFNIF', blank=True)),
                ('nombrecliente', models.CharField(max_length=100, null=True, verbose_name=b'Nombre Cliente', blank=True)),
                ('direccion', models.CharField(max_length=100, null=True, verbose_name=b'Direcci\xc3\xb3n', blank=True)),
                ('provincia', models.CharField(max_length=100, null=True, verbose_name=b'Provincia', blank=True)),
                ('idprovincia', models.CharField(verbose_name=b'Id Provincia', max_length=100, null=True, editable=False)),
                ('ciudad', models.CharField(max_length=100, null=True, verbose_name=b'Ciudad', blank=True)),
                ('codpostal', models.CharField(max_length=10, null=True, verbose_name=b'Codigo Postal', blank=True)),
                ('nombreclienteFacturacion', models.CharField(max_length=100, null=True, verbose_name=b'Nombre Cliente Facturacion', blank=True)),
                ('cifnifFacturacion', models.CharField(max_length=20, null=True, verbose_name=b'CIFNIF Facturacion', blank=True)),
                ('codpais', models.CharField(max_length=20, null=True, verbose_name=b'Codigo Pais', blank=True)),
                ('direccionEnvio', models.CharField(max_length=200, null=True, verbose_name=b'Direcci\xc3\xb3n de Env\xc3\xado', blank=True)),
                ('provinciaEnvio', models.CharField(max_length=100, null=True, verbose_name=b'Provincia de env\xc3\xado', blank=True)),
                ('idprovinciaEnvio', models.CharField(verbose_name=b'Id Provincia de Env\xc3\xado', max_length=100, null=True, editable=False)),
                ('ciudadEnvio', models.CharField(max_length=100, null=True, verbose_name=b'Ciudad de Env\xc3\xado', blank=True)),
                ('codpostalEnvio', models.CharField(max_length=10, null=True, verbose_name=b'Codigo Postal de Env\xc3\xado', blank=True)),
                ('codigo', models.CharField(max_length=13, null=True, verbose_name=b'Codigo', blank=True)),
                ('tasaconv', models.FloatField(default=0.5, blank=True, verbose_name=b'Tasa conv', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('codejercicio', models.CharField(max_length=4, null=True, verbose_name=b'Codigo Ejercicio', blank=True)),
                ('irpf', models.FloatField(default=0.5, blank=True, verbose_name=b'IRPF', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1000.5)])),
                ('totaleuros', models.FloatField(default=0.5, blank=True, verbose_name=b'Total Euros', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1006.5)])),
                ('total', models.FloatField(default=0.5, blank=True, verbose_name=b'Total', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1006.5)])),
                ('totaliva', models.FloatField(default=0.5, blank=True, verbose_name=b'Iva', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1006.5)])),
                ('neto', models.FloatField(default=0.5, blank=True, verbose_name=b'Neto', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1006.5)])),
                ('porcomision', models.FloatField(default=0.5, blank=True, verbose_name=b'Por comisi\xc3\xb3n', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1006.5)])),
                ('idpresupuesto', models.IntegerField(default=0, verbose_name=b'Id presupuesto', blank=True)),
                ('observaciones', tinymce.models.HTMLField(null=True, blank=True)),
                ('servido', models.CharField(max_length=10, null=True, verbose_name=b'Servido', blank=True)),
                ('editable', models.NullBooleanField(default=0, verbose_name=b'Editable')),
                ('codalmacen', models.CharField(max_length=4, null=True, verbose_name=b'Codigo almacen', blank=True)),
                ('fechasalida', models.DateField(null=True, verbose_name=b'Fecha Salida', blank=True)),
                ('numero', models.CharField(max_length=12, null=True, verbose_name=b'Numero', blank=True)),
                ('fecha', models.DateField(null=True, verbose_name=b'Fecha', blank=True)),
                ('estado', models.IntegerField(default=0, verbose_name=b'Estado del pedido', choices=[(0, b'En proceso'), (1, b'Enviado'), (2, b'Entregado'), (3, b'Cancelado')])),
                ('pagado', models.BooleanField(default=False)),
                ('created_at', models.IntegerField(default=0, editable=False)),
                ('updated_at', models.IntegerField(default=0, editable=False)),
                ('generar_factura', models.BooleanField(default=False, verbose_name=b'Generar Factura')),
                ('codcliente', models.ForeignKey(related_name='PedidoCli_Cliente', verbose_name=b'Codigo Cliente', to='cliente.Cliente')),
                ('coddir', models.ForeignKey(related_name='PedidoCli_DirClientes', verbose_name=b'Codigo Direcci\xc3\xb3n', to='cliente.DirClientes')),
                ('coddirEnvio', models.ForeignKey(related_name='PedidoCli_DirClientesEnvio', verbose_name=b'Codigo Direcci\xc3\xb3n Env\xc3\xado', to='cliente.DirClientes')),
                ('codpago', models.ForeignKey(verbose_name=b'Formas de Pago - TPV', blank=True, to='facturacion.FormasPago', null=True)),
                ('formaEnvio', models.ForeignKey(related_name='PedidoCli_FormasEnvio', verbose_name=b'Forma de env\xc3\xado', to='facturacion.FormasEnvio')),
                ('formaPago', models.ForeignKey(related_name='PedidoCli_FormasPago', verbose_name=b'Forma de pago', to='facturacion.FormasPago')),
            ],
            options={
                'verbose_name': 'Pedido',
            },
        ),
        migrations.AddField(
            model_name='lineapedidocli',
            name='idpedido',
            field=models.ForeignKey(related_name='LineaPedidoCli_PedidoCli', verbose_name=b'idpedido', to='facturacion.PedidoCli'),
        ),
        migrations.AddField(
            model_name='lineapedidocli',
            name='referencia',
            field=models.ForeignKey(related_name='LineaPedidoCli_Articulo', verbose_name=b'referencia', to='catalogo.Articulo'),
        ),
        migrations.AddField(
            model_name='facturascli',
            name='codpago',
            field=models.ForeignKey(to='facturacion.FormasPago'),
        ),
        migrations.AddField(
            model_name='facturascli',
            name='codpais',
            field=models.ForeignKey(blank=True, to='geo.Pais', null=True),
        ),
        migrations.AddField(
            model_name='facturascli',
            name='idpedido',
            field=models.ForeignKey(to='facturacion.PedidoCli', null=True),
        ),
        migrations.AddField(
            model_name='facturascli',
            name='idprovincia',
            field=models.ForeignKey(blank=True, to='geo.Provincia', null=True),
        ),
    ]
